<?xml version="1.0"?>
<!DOCTYPE renderer SYSTEM "renderer.dtd">
<!--
  Top level tag, mandatory:
	<renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
    <melheader>: "s" is a mel script executed just after the file is read 
    <meltrailer>: "s" is a mel script executed after all flags are converted
        to mel. Should contain at least the rendering command.

  Other tags:
    <sep>: "desc" produces a line in the help. Blank if desc is missing.
    <attr>: produces a setAttr line.
        "n" is the flag name.
        "s" the attribute name.
        "t" the parameter type, used in help description.
        "h" the help description.
    <attrString>: produces a setAttr line for a string attribute.
        Same parameters as <attr>, but for string attributes.
    <mel>: Calls a mel script.
        "n" is the flag name.
        "p" the number of parameters.
        "s" the string defining the action %1 ... %p are replaced with values
                read after the flag.
        "t" the parameter types, used in help description.
        "h" the help description.
-->
<renderer desc="V-Ray for Maya renderer">
	<melheader s='string $opt=""; string $rl=""; string $rp=""; float $resize=-1.; vrayRegisterRenderer(); vrayCreateVRaySettingsNode(); select vraySettings;'/>
	<meltrailer s='setMayaSoftwareLayers($rl, $rp); setImageSizePercent($resize); mayaBatchRenderProcedure(0, "", "", "vray", $opt);'/>
	<sep />

	<sep desc='All purpose flags:' />
	<mel n="exportFileName" p='1' t='string'
		 s='setAttr vraySettings.vrscene_on 1; setAttr -type "string" vraySettings.vrscene_filename "%1";' />
	<sep desc='                     Use this to force exporting to a .vrscene file with the'/>
	<sep desc='                     given name. Example:'/>
	<sep desc='                         Render -r vray -exportFileName "c:/1.vrscene"'/>
	<sep desc='                                        -noRender'/>
	<sep desc='                                        filename'/>
	<mel n="noRender" p='0' t=''
		 s='setAttr vraySettings.vrscene_render_on 0;' />
	<sep desc='                     Use this to disable rendering.'/>
	<sep desc='                     Usually it is used with -exportFileName to produce a'/>
	<sep desc='                     .vrscene file. Example:'/>
	<sep desc='                         Render -r vray -exportFileName "c:/1.vrscene"'/>
	<sep desc='                                        -noRender'/>
	<sep desc='                                        filename'/>
	<mel n="exportSeparate" p='0' t=''
		 s='setAttr vraySettings.misc_separateFiles 1;' />
	<sep desc='                     Use this to export to separate .vrscene files. Example:'/>
	<sep desc='                         Render -r vray -exportFileName "c:/1.vrscene"'/>
	<sep desc='                                        -noRender'/>
	<sep desc='                                        -exportSeparate'/>
	<sep desc='                                        filename'/>
	<mel n="exportCompressed" p='0' t=''
		 s='setAttr vraySettings.misc_compressedVrscene 1;' />
	<sep desc='                     Use this to export to compressed .vrscene file (still'/>
	<sep desc='                     experimental). Example:'/>
	<sep desc='                         Render -r vray -exportFileName "c:/1.vrscene"'/>
	<sep desc='                                        -noRender'/>
	<sep desc='                                        -exportCompressed'/>
	<sep desc='                                        filename'/>
	<mel n="exportFramesSeparate" p='0' t=''
		 s='setAttr vraySettings.misc_eachFrameInFile 1;' h="Use this to export each frame to separate file."/>
	<mel n="exportSpecific" p='1' t='string' s='$opt+=" -exportSpecific \\\"%1\\\" "' />
    <sep desc='                     Use this to restrict the exporter to a list of (DAG) nodes. Example:'/>
    <sep desc='                         Render -r vray -exportSpecific "pSphereShape1 pSphereShape2 pPlane1" filename'/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="General purpose flags:"/>
	<mel n="rd" p="1" t="path" s='workspace -fr "images" "%1";workspace -fr "depth" "%1";' h="Directory in which to store image file"/>
	<mel n="of" p="1" t="string" s='setAttr -type "string" "vraySettings.imageFormatStr" "%1";' h="Output image file format. See the Render Settings window to find available formats"/>
	<mel n="im" p="1" t="filename" s='setAttr -type "string" "vraySettings.fileNamePrefix" "%1";' h="Image file output name"/>
	<mel n="rep" p="1" t="boolean" s='$opt += " -rep "; $opt+= %1;' h="Replace or not the rendered image if it already exists (-rep true/false) "/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Frame numbering options"/>
	<mel n="s" p="1" t="float" s='vrayRemoveOverrideFromAllRenderLayers("defaultRenderGlobals.animation"); setAttr defaultRenderGlobals.animation 1; vrayRemoveOverrideFromAllRenderLayers("defaultRenderGlobals.startFrame"); setAttr defaultRenderGlobals.startFrame %1' h="Starting frame for an animation sequence"/>
	<mel n="e" p="1" t="float" s='vrayRemoveOverrideFromAllRenderLayers("defaultRenderGlobals.animation"); setAttr defaultRenderGlobals.animation 1; vrayRemoveOverrideFromAllRenderLayers("defaultRenderGlobals.endFrame"); setAttr defaultRenderGlobals.endFrame %1' h="End frame for an animation sequence"/>
	<mel n="b" p="1" t="float" s='setAttr "defaultRenderGlobals.byFrameStep" %1; setAttr "defaultRenderGlobals.animation" true;' h="By frame (or step) for an animation sequence"/>
	<mel n="pad" p="1" t="int" s='setAttr "vraySettings.fileNamePadding" %1;' h="Number of digits for the frame number in the output image file name"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Camera options"/>
	<mel n="cam" s='makeCameraRenderable("%1")' p="1" t="name" h="Specify which camera to be rendered"/>
	<mel n="iip" s="disableImagePlanes" p="0" t="" h="Ignore image planes when rendering" />
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Bake rendering"/>
	<mel n="bake_node"     s='setAttr "vraySettings.bakeRender" 1; select %1;' p="1" t="name" h="Specify object to bake render"/>
	<mel n="bake_map"      s='setAttr "vraySettings.bakeRender" 1; setAttr -type "string" vraySettings.bakeChannel "%1";' p="1" t="name" h="Which UV set to use"/>
	<mel n="bake_padding"  s='setAttr "vraySettings.bakeRender" 1; setAttr "vraySettings.bakeDilation" %1;' p="1" t="float" h="Edge padding in pixels"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Resolution options"/>
	<mel n="reg" s="vraySetBatchDoRegion(%1,%2,%3,%4);" t="int int int int" p="4" h="Set sub-region pixel boundary of the final image:\n\tleft, right, bottom, top"/>
	<!-- vrayRemoveOverrideFromAllRenderLayers remove all overrides in all layers in the scene, like this user can specify exact width/height in batch mode even when they are overridden -->
	<mel n="x" p="1" s='vrayRemoveOverrideFromAllRenderLayers("vraySettings.width");setAttr "vraySettings.width" %1;' t="int" h="Set X resolution of the final image"/>
	<mel n="y" p="1" s='vrayRemoveOverrideFromAllRenderLayers("vraySettings.height");setAttr "vraySettings.height" %1;' t="int" h="Set Y resolution of the final image"/>
	<mel n="par" p="1" s='vrayRemoveOverrideFromAllRenderLayers("vraySettings.pixelAspect");setAttr "vraySettings.pixelAspect" %1;' t="float" h="Pixel Aspect Ratio for the rendered image"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="System options"/>
	<mel n="threads" s='vrayRemoveOverrideFromAllRenderLayers("vraySettings.sys_max_threads");setAttr "vraySettings.sys_max_threads" %1;' p="1" t="int" h="Specify how many render threads to use (0-auto)"/>
	<sep/>
	<!-- ______________________________________________________________ -->
  <sep desc="Render Layers and Passes:"/>
  <mel n="rl" s='$rl="%1"' p="1" t="boolean|name(s)" h="Render each render layer separately"/>
  <sep/>
  <!-- ______________________________________________________________ -->
  <sep desc="Mel callbacks"/>
  <attrString n="preRender" s="defaultRenderGlobals.preMel" t="string" h="Mel code executed before rendering"/>
  <attrString n="postRender" s="defaultRenderGlobals.postMel" t="string" h="Mel code executed after rendering"/>
  <attrString n="preLayer" s="defaultRenderGlobals.preRenderLayerMel" t="string" h="Mel code executed before each render layer"/>
  <attrString n="postLayer" s="defaultRenderGlobals.postRenderLayerMel" t="string" h="Mel code executed after each render layer"/>
  <attrString n="preFrame" s="defaultRenderGlobals.preRenderMel" t="string" h="Mel code executed before each frame"/>
  <attrString n="postFrame" s="defaultRenderGlobals.postRenderMel" t="string" h="Mel code executed after each frame"/>
  <sep/>
  <!-- ______________________________________________________________ -->
	<sep desc=" *** Remember to place a space between option flags and their arguments. ***"/>
	<sep desc="Any boolean flag will take the following values as TRUE: on, yes, true, or 1."/>
	<sep desc="Any boolean flag will take the following values as FALSE: off, no, false, or 0."/>
	<sep/>
	<sep desc="  Examples:"/>
	<sep desc="    render -r vray -cam persp -s 1 -e 10 -x 512 -y 512 scene_x.mb"/>
	<sep desc="    render -r vray -cam persp -threads 1 -bake_node pCone1 -bake_map map1 scene_x.mb"/>
</renderer>
